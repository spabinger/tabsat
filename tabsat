#!/bin/bash

TABSAT_VERSION="1.0.2"

TMP_CUR_DIR=`dirname $0`
TMP_TABSAT_SCRIPT="$TMP_CUR_DIR/tabsat"
TMP_ABS_TABSAT_SCRIPT=`readlink -f $TMP_TABSAT_SCRIPT`
BASE_DIR=`dirname $TMP_ABS_TABSAT_SCRIPT`

BEDTOOLS_BASE="${BASE_DIR}/tools/bedtools/bedtools2/bin"
FINAL_TABLE_SCRIPT="${BASE_DIR}/tools/ait/create_final_table.py"
CHECK_PYTHON_VERSION_SCRIPT="${BASE_DIR}/tools/ait/check_python_version.py"
FINAL_BED_SCRIPT="${BASE_DIR}/tools/ait/convert_final_table_to_bed.py"
CHECK_QUALITY_SCRIPT="${BASE_DIR}/tools/ait/check_quality.sh"
BUILD_QUALITY_SUMMARY_SCRIPT="${BASE_DIR}/tools/ait/build_quality_summary.sh"
SUMMARIZE_OFF_TARGET_REGIONS="${BASE_DIR}/tools/ait/summarize_off_target_regions.py"
FINAL_COMBINE_IDXSTATS_SCRIPT="${BASE_DIR}/tools/ait/combine_idx_stats.py"
R_PLOTTING="${BASE_DIR}/tools/ait/lollipop.R"
METHYL_SUBPOP="${BASE_DIR}/tools/MethylSubpop/subpopulations.sh"
BISMARK_RUN="${BASE_DIR}/02_meth_pipe.sh"
JSON_CREATOR="${BASE_DIR}/tools/ait/prepare_json.py"
INTERSECT_BED="${BEDTOOLS_BASE}/intersectBed"
GENOMECOVERAGE="${BEDTOOLS_BASE}/genomeCoverageBed"
SORTBED="${BEDTOOLS_BASE}/sortBed"
TARGET_LIST_CHECKER="${BASE_DIR}/tools/ait/check_target_list.py"
PATTERNMAP="${BASE_DIR}/tools/Patternmap/patternmap.sh"
SAMTOOLS="${BASE_DIR}/tools/samtools/samtools-1.4/samtools"


usage () {
    echo -e "\nUsage: $0 -t targetlist -e <SE|PE> -l <DIR|NONDIR> -g <hg19|mm10> -d inputdirectory [with list of files] -a aligner <bowtie2|tmap> -m min_read_length -x max_read_length -q min_read_qual -p percent_target_for_patterns -r min_number_reads_cpg -s sort_list -o outputdirectory [files] \n"
}

version () {
    echo -e "TABSAT ${TABSAT_VERSION}"
}


############# Filtering of parameters
while getopts ":hvt:e:l:d:o:a:m:x:q:p:r:s:g:" option; do
	case "$option" in
		h) usage
		   exit 0 ;;
		v) version
		   exit 0 ;;
		t) TARGET_LIST=${OPTARG};;
		e) LIBRARY=${OPTARG};;
		l) BS_SEQ=${OPTARG};;
		d) INPUTDIR=${OPTARG};;
		o) OUTPUT_DIR=${OPTARG};;
		a) ALIGNER=${OPTARG};;
		m) MIN_READ_LEN=${OPTARG};;
		x) MAX_READ_LEN=${OPTARG};;
		q) MIN_READ_QUAL=${OPTARG};;
		p) PERCENT_TARGET=${OPTARG};;
		r) READ_CUTOFF=${OPTARG};;
		s) SORT_LIST=${OPTARG};;
		g) REFERENCE_GENOME=${OPTARG};;
		?) echo "Error: unknown option -$OPTARG" 
			usage
			exit 1;;
	esac
done 
shift $(( OPTIND - 1 ))    

echo -e "\n"
echo -e "#################################"
echo -e "##  Welcome to TABSAT!         ##"
echo -e "##  github.com/tadKeys/tabsat  ##"
echo -e "#################################\n"


## Check and set python version
${CHECK_PYTHON_VERSION_SCRIPT}
check_return_code=$?

#echo ${check_return_code}
if [[ ${check_return_code} != 0 ]]
then
    echo "Python 2.7 is needed"
    exit 1
fi


if [[ $BS_SEQ != "DIR" && $BS_SEQ != "NONDIR" ]]; then
  echo "- Error: You need to specify the BS-Seq library using <dir|nondir> for directional or nondirectional"
  usage
  exit 1
fi

if [ -z "$TARGET_LIST" ]; then
  echo "- Error: You need to specify a Target file using -t"
  usage
  exit 1
fi

if [ -z "$LIBRARY" ]; then
  echo "- Error: You need to specify a sequencing library using -e (SE or PE)"
  usage
  exit 1
fi

if [ ${LIBRARY} == "SE" ] || [ ${LIBRARY} == "PE" ]; then
    echo "- Library is ${LIBRARY}"
else
    echo "- Please specify a correct sequencing library (SE,PE)"
    exit 1
fi


if [ -z "$REFERENCE_GENOME" ]; then
  echo "- Error: You need to specify a Reference genome (hg19, mm10) -g"
  usage
  exit 1
fi


if [ -z "$ALIGNER" ]; then
  echo "- Default aligner for bismark: tmap"
  ALIGNER="tmap"
fi

if [ ${ALIGNER} == "tmap" ] || [ ${ALIGNER} == "bowtie2" ]; then
    echo "- Using aligner: ${ALIGNER}"
else
    echo "- Error: aligner not correct: ${ALIGNER}; choices: bowtie2,tmap"
    usage
    exit 1
fi



if [ -z "${MIN_READ_QUAL}" ]; then
  echo "- Minimum read qual not specified. Setting it to 20"
  MIN_READ_QUAL="20"
fi
echo "- MIN_READ_QUAL: ${MIN_READ_QUAL}"


if [ -z "$MIN_READ_LEN" ]; then
  echo "- Minimum read length not specified. Setting it to 8"
  MIN_READ_LEN="8"
fi
echo "- MIN_READ_LEN: ${MIN_READ_LEN}"


if [ -z "$MAX_READ_LEN" ]; then
  echo "- Maximum read length not specified. Setting it to 100000"
  MAX_READ_LEN="100000"
fi
echo "- MAX_READ_LEN: ${MAX_READ_LEN}"


if [ -z "$PERCENT_TARGET" ]; then
  echo "- Percent Target not specified. Setting it to 0.8"
  PERCENT_TARGET="0.8"
fi
echo "- PERCENT_TARGET: ${PERCENT_TARGET}"

if [ -z "$READ_CUTOFF" ]; then
  echo "- Read cutoff not specified. Setting it to 0"
  READ_CUTOFF="0"
fi
echo "- READ_CUTOFF: ${READ_CUTOFF}"

if [ -z "$SORT_LIST" ]; then
  echo "- Sort list not specified. Setting it to ''"
  SORT_LIST=""
fi
echo "- SORT_LIST: ${SORT_LIST}"


if [[ -z "$INPUTDIR" && -z "$@" ]]; then
  echo "- Error: You have to specify either a directory name using -d or pass a list of files"
  usage
  exit 1
fi

if [[ ! -d "$INPUTDIR" &&  -z "$@" ]]; then
  echo "- Error: the dir_name argument must be a directory or pass a list of files"
  exit 1
fi

if [ -z "$OUTPUT_DIR" ]; then
  echo "- Error: You need to specify an Output directory using -o"
  usage
  exit 1
fi



############# Checking the target list
${TARGET_LIST_CHECKER} ${TARGET_LIST}
check_return_code=$?

#echo ${check_return_code}
if [[ ${check_return_code} != 0 ]]
then
    echo "Target list is not in the correct format"
    exit 1
fi



############# Create list of input files
if [ -p $INPUTDIR ]
then
	FILEARRAY="$@"
else
	FILEARRAY="$INPUTDIR/*.fastq" #$@
fi


## Create base output dir
mkdir -p $OUTPUT_DIR

## Create output directories
COV_DIR="$OUTPUT_DIR"/COVERAGE_"$BS_SEQ"_"$ALIGNER"
echo "- Creating and setting coverage directory: $COV_DIR"
mkdir -p $COV_DIR

CPG_DIR="$OUTPUT_DIR"/CPG_"$BS_SEQ"_"$ALIGNER"
echo "- Creating and setting CpG directory: $CPG_DIR"
mkdir -p $CPG_DIR


############# Create directory for methyl subpopulations
POP_DIR="${COV_DIR}/MethylSubpopulations"
mkdir -p $POP_DIR


############## Run bismark for all input files

## CD into the output dir
cd ${OUTPUT_DIR}

## Create qc dir
mkdir -p qc

## Create idxstats dir
mkdir -p idxstats

## Create dir cph
mkdir -p cph

## Create directory for qualities
echo "-- Creating quality directory"
mkdir -p quality

echo -e "\n"

base_pwd_dir=`pwd`


for file in $FILEARRAY
do
    current="$(basename "$file" .fastq)"
    current_dir="${base_pwd_dir}/${current}_${BS_SEQ}_${ALIGNER}"
    echo -e "\n\n- Basename: ${current}"
    echo "- current_dir: ${current_dir}"
    echo -e "\n- Running Bismark... \n"

    ## If PE get second file based on file name
    if [ ${LIBRARY} == "PE" ]
    then
	## Check if current file ends with _2
	if [ ${file: -8} == "_2.fastq" ]
	then
	    echo "- In list of files to process a 2nd PE file was found. Don't do anything; continue with loop"
	    continue
	fi
	echo "- First file of PE ${current}"

	current_wo_suffix="$(basename "$current" _1)"

	for file_pe_loop in $FILEARRAY
	do
	    file_pe_loop_wo_suffix="$(basename "$file_pe_loop" _2.fastq)"
	    if [ ${current_wo_suffix} == ${file_pe_loop_wo_suffix} ]
	    then
		file_pe=${file_pe_loop}
		echo "- Found 2nd PE file ${file_pe}"
		break
	    fi
	done
    
	bash ${BISMARK_RUN} ${file} ${current_dir} ${TARGET_LIST} ${BS_SEQ} ${ALIGNER} ${MIN_READ_LEN} ${MAX_READ_LEN} ${MIN_READ_QUAL} ${REFERENCE_GENOME} ${LIBRARY} ${file_pe}
    else
        bash ${BISMARK_RUN} ${file} ${current_dir} ${TARGET_LIST} ${BS_SEQ} ${ALIGNER} ${MIN_READ_LEN} ${MAX_READ_LEN} ${MIN_READ_QUAL} ${REFERENCE_GENOME} ${LIBRARY}
    fi


    echo -e "\nCopying coverage files"
    echo "cp ${current_dir}/*.cov $COV_DIR"
    /bin/bash -c "cp ${current_dir}/*.cov ${COV_DIR}/"

    echo -e "\nCopying CpG files with strand information"
    echo "cp ${current_dir}/CpG_*txt $CPG_DIR"
    /bin/bash -c "cp ${current_dir}/CpG_*txt ${CPG_DIR}/"

    echo -e "\nCopying SAM files"
    /bin/bash -c "cp ${current_dir}/*.sam ${POP_DIR}/"

    echo -e "\nCopying qc files"
    /bin/bash -c "cp ${current_dir}/*html qc"


    echo ""


    current_sam=`ls ${current_dir}/*sam`
    echo -e "\nCurrent_sam: ${current_sam}"

    echo -e "\nRemoving all reads with coverage 1"

    ## Convert target list to BED
    echo "Convert target list to bed"
    sed "s/$/\t-$f/" ${TARGET_LIST} | awk '{ print $2"\t"$3"\t"$4"\t"$1"\t"$6"\t"$5}' - | tail -n +2 | ${SORTBED} -i - > "${current_dir}/target_list_for_cov_one.bed"

    echo ""

    ## Convert SAM to BAM
    echo "${SAMTOOLS} view -S -b -h ${current_sam} > ${current_sam}_removed_cov_one.bam"
    ${SAMTOOLS} view -S -b -h ${current_sam} > "${current_sam}_removed_cov_one.bam"

    echo ""

    ## Sort BAM file
    echo "${SAMTOOLS} sort ${current_sam}_removed_cov_one.bam -o ${current_sam}_removed_cov_one_sorted.bam"
    ${SAMTOOLS} sort "${current_sam}_removed_cov_one.bam" -o "${current_sam}_removed_cov_one_sorted.bam"

    echo ""

    ## Create a BAM file with reads outside of the target
    echo "${INTERSECT_BED} -v -a ${current_sam}_removed_cov_one_sorted.bam -b ${current_dir}/target_list_for_cov_one.bed > ${current_sam}_removed_cov_one_sorted_off_target.bam"
    ${INTERSECT_BED} -v -a "${current_sam}_removed_cov_one_sorted.bam" -b "${current_dir}/target_list_for_cov_one.bed" > "${current_sam}_removed_cov_one_sorted_off_target.bam"

    echo ""

    ## Create the coverage using the BAM with reads outside of the target -> select all with coverage == 1 - then intersect with "original" BAM
    echo "${GENOMECOVERAGE} -ibam ${current_sam}_removed_cov_one_sorted_off_target.bam -bg | awk '\$4 < 2' | ${INTERSECT_BED} -a ${current_sam}_removed_cov_one_sorted.bam -b - -v > ${current_sam}_removed_one_final.bam"
    ${GENOMECOVERAGE} -ibam "${current_sam}_removed_cov_one_sorted_off_target.bam" -bg | awk '$4 < 2' | ${INTERSECT_BED} -a "${current_sam}_removed_cov_one_sorted.bam" -b - -v > "${current_sam}_removed_one_final.bam"

    echo ""

    ## Convert BAM to SAM
    echo "${SAMTOOLS} view -h ${current_sam}_removed_one_final.bam > ${current_sam}_removed_one_final.sam"
    ${SAMTOOLS} view -h "${current_sam}_removed_one_final.bam" > "${current_sam}_removed_one_final.sam"

    
    echo ""
    echo "Copy to current sam"

    ## Copy to current sam
    cp "${current_sam}_removed_one_final.sam" ${current_sam}

    echo ""

    echo "Create samtools stats"

    ## Create samtools stats
    current_bam="${current_dir}/${current}.bam"


    echo "${SAMTOOLS} view -S -b ${current_sam} > ${current_bam}"
    ${SAMTOOLS} view -S -b ${current_sam} > ${current_bam}

    echo "${SAMTOOLS} sort ${current_bam} ${current_bam}.sorted.bam"
    ${SAMTOOLS} sort ${current_bam} -o ${current_bam}.sorted.bam

    echo "${SAMTOOLS} index ${current_bam}.sorted.bam"
    ${SAMTOOLS} index ${current_bam}.sorted.bam

    ${SAMTOOLS} idxstats "${current_bam}.sorted.bam" > "${current_dir}/${current}.idxstats"
    cp "${current_dir}/${current}.idxstats" "idxstats"

    ## Copy the CpH files
    echo "-- Copying the CpH files"
    cp ${current_dir}/CH*txt cph

    ## Create quality stats
    echo "-- Creating quality stats"
    echo "${CHECK_QUALITY_SCRIPT} ${OUTPUT_DIR}/quality ${TARGET_LIST} ${current_bam}.sorted.bam"
    ${CHECK_QUALITY_SCRIPT} ${OUTPUT_DIR}/quality ${TARGET_LIST} ${current_bam}.sorted.bam




done

############## Combine idxstats
echo "-- Combinind idxstats"
    IDX_DIR="${OUTPUT_DIR}/idxstats"
    ${FINAL_COMBINE_IDXSTATS_SCRIPT} ${IDX_DIR} "${IDX_DIR}/coverage_summary.csv"
echo "-- .. done with combining idxstats"




############## Create final table
echo -e "\n-- Creating final table.."

    ## Get the all_cpgs_file path
    if [ $REFERENCE_GENOME == "hg19" ]
    then
	ALL_CPGS_FILE=${BASE_DIR}/tools/ait/all_cpgs_only_pos_hg19.txt
    elif [ $REFERENCE_GENOME == "mm10" ]
    then
	ALL_CPGS_FILE=${BASE_DIR}/tools/ait/all_cpgs_only_pos_mm10.txt
    else
	echo "No all_cpgs_file present for reference: ${REFERENCE_GENOME}"
	exit 1
    fi

    echo "${FINAL_TABLE_SCRIPT} ${TARGET_LIST} ${COV_DIR} ${ALIGNER} ${ALL_CPGS_FILE} ${READ_CUTOFF}"
    ${FINAL_TABLE_SCRIPT} ${TARGET_LIST} ${COV_DIR} ${ALIGNER} ${ALL_CPGS_FILE} ${READ_CUTOFF}
echo "-- ... done with table creation."

## Link the final table
FINAL_TABLE="ResultMethylListOnlyReferenceCpGs.csv"
ln -s ${COV_DIR}/${FINAL_TABLE}

## Produce the BED file
echo -e "\n-- Creating final bed ..."
FINAL_BED="ResultMethylListOnlyReferenceCpGs.bed"
${FINAL_BED_SCRIPT} ${FINAL_TABLE} ${FINAL_BED}
echo "-- .. done with bed creation."



############## Create lollipop plots
mkdir -p $COV_DIR/PLOTS
echo -e "\n-- Create lollipop plots for every target"
echo "Rscript --vanilla ${R_PLOTTING} ${COV_DIR} ${BS_SEQ} ${ALIGNER} ${SORT_LIST}"
Rscript --vanilla ${R_PLOTTING} ${COV_DIR} ${BS_SEQ} ${ALIGNER} ${SORT_LIST}
echo -e "-- .. done with plotting.\n"

## Remove csv tmp files
for tmp_file_to_rm in `tail -n +2 ${COV_DIR}/MethylList.csv | cut -f 1 -d "," | sort | uniq`
do
    rm $COV_DIR/${tmp_file_to_rm}*
done


############## Find methyl subpopulations
echo -e "\n- CMD subpopulations: ${METHYL_SUBPOP} -i ${POP_DIR} -p ${PERCENT_TARGET} -t ${TARGET_LIST}"
bash ${METHYL_SUBPOP} -i ${POP_DIR} -p ${PERCENT_TARGET} -t ${TARGET_LIST}


############## Create Patternmap
echo "-- Creating patternmap"
## Check if input is list -> copy to output folder
PATTERNMAP_INPUT_DIR="${INPUTDIR}"
if [ -p $INPUTDIR ]
then
    mkdir -p ${OUTPUT_DIR}/copied_inputs
    echo "copy command: cp $FILEARRAY \"${OUTPUT_DIR}/copied_inputs\""
    cp $FILEARRAY "${OUTPUT_DIR}/copied_inputs"
    PATTERNMAP_INPUT_DIR="${OUTPUT_DIR}/copied_inputs"
fi

echo -e "\n- CMD patternmap: ${PATTERNMAP} -i ${OUTPUT_DIR} -s ${PATTERNMAP_INPUT_DIR} -t ${TARGET_LIST} -a ${ALIGNER} -l ${BS_SEQ}"
bash ${PATTERNMAP} -i ${OUTPUT_DIR} -s ${PATTERNMAP_INPUT_DIR} -t ${TARGET_LIST} -a ${ALIGNER} -l ${BS_SEQ}


############## Copy the plots
echo "-- Copying the plots"
mkdir plots
cp ${COV_DIR}/PLOTS/* plots/

##############  Build quality summary
${BUILD_QUALITY_SUMMARY_SCRIPT} ${OUTPUT_DIR}/quality
${SUMMARIZE_OFF_TARGET_REGIONS} "${OUTPUT_DIR}/quality" "${OUTPUT_DIR}/quality/01_summary_off_targets.csv"


############## Convert all plots to pngs
echo "-- Converting all plots to pngs"
cd plots
for file in `ls *.pdf`
do
    convert -density 180 ${file} -quality 100 "${file}.png"
done
cd ..


############## Link the subpopulation result
mkdir subpopulations
cp ${COV_DIR}/MethylSubpopulations/Output/* subpopulations/


############## Change permissions for qc directory
chmod a+r -R qc


############## Create final JSON file
echo "Creating final JSON file"
echo "${JSON_CREATOR} ${FINAL_TABLE} plots subpopulations qc idxstats cph ${FINAL_BED}"
${JSON_CREATOR} ${FINAL_TABLE} plots subpopulations qc idxstats cph ${FINAL_BED}



#################################################End of Worfklow#########################################

echo -e "\n"
echo -e "Finished analyzing the data.\n"
echo -e "##########################################"
echo -e "##  Thank you for using TABSAT!         ##"
echo -e "##  github.com/tadKeys/tabsat           ##"
echo -e "##########################################\n"


